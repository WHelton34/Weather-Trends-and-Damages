import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

# Load CSV data into a DataFrame
csv_url = "https://www.ncdc.noaa.gov/stormevents/csv?eventType=ALL&beginDate_mm=01&beginDate_dd=01&beginDate_yyyy=2012&endDate_mm=12&endDate_dd=31&endDate_yyyy=2012&county=MAGOFFIN%3A153&hailfilter=0.00&tornfilter=0&windfilter=000&sort=DT&submitbutton=Search&statefips=21%2CKENTUCKY"
df = pd.read_csv(csv_url)

# Bar Plot: Number of events by type
plt.figure(figsize=(12, 6))
sns.countplot(data=df, x='EVENT_TYPE', order=df['EVENT_TYPE'].value_counts().index)
plt.title('Number of Events by Type')
plt.xlabel('Event Type')
plt.ylabel('Count')
plt.xticks(rotation=90)
plt.show()
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

# Convert the BEGIN_DATE column to datetime format
df['BEGIN_DATE'] = pd.to_datetime(df['BEGIN_DATE'])

# Group by BEGIN_DATE and EVENT_TYPE, then calculate the sum of injuries
grouped_injuries = df.groupby(['BEGIN_DATE', 'EVENT_TYPE'])[['INJURIES_DIRECT', 'INJURIES_INDIRECT']].sum().reset_index()

# Line Plot: Injuries (direct and indirect) over time by event type
plt.figure(figsize=(12, 6))
sns.lineplot(data=grouped_injuries, x='BEGIN_DATE', y='INJURIES_DIRECT', hue='EVENT_TYPE', marker='o')
sns.lineplot(data=grouped_injuries, x='BEGIN_DATE', y='INJURIES_INDIRECT', hue='EVENT_TYPE', marker='x', linestyle='--')
plt.title('Injuries (Direct and Indirect) Over Time by Event Type')
plt.xlabel('Date')
plt.ylabel('Number of Injuries')
plt.legend(title='Event Type', bbox_to_anchor=(1.05, 1), loc='upper left')
plt.xticks(rotation=45)
plt.tight_layout()
plt.show()
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

# Scatter Plot: Damage to property vs. damage to crops
plt.figure(figsize=(10, 6))
sns.scatterplot(data=df, x='DAMAGE_PROPERTY_NUM', y='DAMAGE_CROPS_NUM', hue='EVENT_TYPE', style='EVENT_TYPE')
plt.title('Damage to Property vs. Damage to Crops')
plt.xlabel('Damage to Property ($)')
plt.ylabel('Damage to Crops ($)')
plt.legend(title='Event Type', bbox_to_anchor=(1.05, 1), loc='upper left')
plt.tight_layout()
plt.show()
